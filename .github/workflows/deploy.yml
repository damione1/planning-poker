name: Release and Deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write  # Need write permission for creating releases
  packages: write  # Need write permission for GHCR

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache templ binary
        uses: actions/cache@v4
        with:
          path: ~/go/bin/templ
          key: ${{ runner.os }}-templ-${{ hashFiles('go.mod') }}

      - name: Install templ
        run: |
          if [ ! -f ~/go/bin/templ ]; then
            go install github.com/a-h/templ/cmd/templ@latest
          fi
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate templ templates
        run: templ generate

      - name: Run tests
        run: go test -v ./...

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## Initial Release" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "First production release of Planning Poker." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Planning Poker v${{ steps.version.outputs.version }}
          body: |
            # Planning Poker v${{ steps.version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ## üöÄ Deployment

            This version is automatically deployed to AWS EC2 via CodeDeploy.

            **Service URL**: Check your configured domain or EC2 public IP.

            ## üìã Build Information

            - **Version**: ${{ steps.version.outputs.version }}
            - **Commit**: ${{ github.sha }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Go Version**: 1.25
            - **Deployment**: AWS CodeDeploy with Docker Compose

            ## üìö Documentation

            See [DEPLOY.md](https://github.com/${{ github.repository }}/blob/main/DEPLOY.md) for deployment guide.
          draft: false
          prerelease: false
          generate_release_notes: false

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AWS EC2 via CodeDeploy
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create deployment package
        run: |
          echo "üì¶ Creating minimal deployment package..."

          # Only include CodeDeploy scripts and docker-compose
          mkdir -p deploy-package
          cp -r scripts deploy-package/
          cp appspec.yml deploy-package/
          cp docker-compose.prod.yml deploy-package/

          cd deploy-package
          zip -r ../deployment-${{ steps.version.outputs.version }}.zip .
          cd ..

          echo "‚úÖ Deployment package created"

      - name: Upload to S3
        run: |
          echo "‚¨ÜÔ∏è Uploading deployment package to S3..."

          aws s3 cp deployment-${{ steps.version.outputs.version }}.zip \
            s3://${{ vars.CODEDEPLOY_S3_BUCKET }}/planning-poker/deployment-${{ steps.version.outputs.version }}.zip

          echo "‚úÖ Package uploaded to S3"

      - name: Create CodeDeploy deployment
        id: deploy
        run: |
          echo "üöÄ Creating CodeDeploy deployment..."

          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ vars.CODEDEPLOY_APP_NAME || 'planning-poker-prod' }} \
            --deployment-group-name ${{ vars.CODEDEPLOY_DEPLOYMENT_GROUP || 'planning-poker-prod-deployment-group' }} \
            --s3-location bucket=${{ vars.CODEDEPLOY_S3_BUCKET }},key=planning-poker/deployment-${{ steps.version.outputs.version }}.zip,bundleType=zip \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --description "Deployment for version ${{ steps.version.outputs.version }}" \
            --query 'deploymentId' \
            --output text)

          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment created: $DEPLOYMENT_ID"

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment ${{ steps.deploy.outputs.deployment_id }} to complete..."

          aws deploy wait deployment-successful \
            --deployment-id ${{ steps.deploy.outputs.deployment_id }}

          echo "‚úÖ Deployment completed successfully!"

      - name: Get deployment status
        if: always()
        run: |
          echo "üìä Deployment status:"

          aws deploy get-deployment \
            --deployment-id ${{ steps.deploy.outputs.deployment_id }} \
            --query 'deploymentInfo.status' \
            --output text

      - name: Deployment complete
        env:
          DOMAIN: ${{ vars.DOMAIN_NAME || 'your-domain.com' }}
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üîó Service URL: https://${{ env.DOMAIN }}"
          echo "üìù Check deployment logs in AWS CodeDeploy console"
