package templates

import (
	"fmt"
	"github.com/damione1/planning-poker/internal/models"
)

templ Room(room *models.Room, participant *models.Participant, isCreator bool) {
	@Base(room.Name) {
		<div class="bg-white rounded-lg shadow-lg p-6 min-h-[600px]" x-data="roomStateManager()" hx-ext="ws" ws-connect={"/ws/" + room.ID}>
			if participant == nil {
				@JoinModal(room.ID)
			}
			<!-- Connection Status Indicator -->
			<div class="fixed top-4 left-4 z-50" x-data x-show="$store.roomState.showConnectionBadge" x-cloak>
				<div class="flex items-center gap-2 px-4 py-2 rounded-lg shadow-lg backdrop-blur-sm" :class="{
					'bg-yellow-100/90 border border-yellow-300': $store.roomState.isReconnecting,
					'bg-red-100/90 border border-red-300': $store.roomState.connectionState === 'disconnected'
				}">
					<div class="animate-pulse">
						<template x-if="$store.roomState.isReconnecting">
							<span class="text-lg">üîÑ</span>
						</template>
						<template x-if="$store.roomState.connectionState === 'disconnected'">
							<span class="text-lg">‚ö†Ô∏è</span>
						</template>
					</div>
					<div class="text-sm font-medium" :class="{
						'text-yellow-800': $store.roomState.isReconnecting,
						'text-red-800': $store.roomState.connectionState === 'disconnected'
					}">
						<template x-if="$store.roomState.isReconnecting">
							<span>Reconnecting<span class="animate-pulse">...</span></span>
						</template>
						<template x-if="$store.roomState.connectionState === 'disconnected'">
							<span>Connection lost</span>
						</template>
					</div>
					<template x-if="$store.roomState.pendingMessages.length > 0">
						<span class="text-xs px-2 py-0.5 bg-white/50 rounded-full font-semibold" :class="{
							'text-yellow-700': $store.roomState.isReconnecting,
							'text-red-700': $store.roomState.connectionState === 'disconnected'
						}" x-text="`${$store.roomState.pendingMessages.length} queued`"></span>
					</template>
				</div>
			</div>
			<header class="mb-10 flex flex-col md:flex-row md:items-center md:justify-between gap-6">
				<div class="flex flex-col gap-4">
					<div class="flex items-center gap-4">
						<div x-data="{ editing: false, newName: '' }">
							<div x-show="!editing" class="flex items-center gap-3">
								<h1 class="text-4xl font-bold bg-gradient-to-r from-primary-600 to-success-600 bg-clip-text text-transparent">{room.Name}</h1>
								if isCreator {
									<button
										@click="editing = true; newName = $el.parentElement.querySelector('h1').textContent.trim()"
										class="text-slate-400 hover:text-primary-500 transition-colors duration-200"
										title="Edit room name"
									>
										‚úèÔ∏è
									</button>
								}
							</div>
							<div x-show="editing" class="flex items-center gap-3">
								<input
									x-model="newName"
									@keydown.enter="sendMessage('update_room_name', { name: newName }); editing = false"
									@keydown.escape="editing = false"
									type="text"
									class="text-4xl font-bold text-slate-900 border-b-2 border-primary-500 bg-transparent focus:outline-none"
									x-init="setTimeout(() => $el.focus(), 10)"
								/>
								<button
									@click="sendMessage('update_room_name', { name: newName }); editing = false"
									class="text-primary-600 hover:text-primary-700 transition-colors"
								>
									‚úì
								</button>
								<button
									@click="editing = false"
									class="text-red-500 hover:text-red-600 transition-colors"
								>
									‚úï
								</button>
							</div>
						</div>
						<a
							href="/"
							class="inline-flex items-center gap-2 px-5 py-2.5 bg-white border-2 border-slate-200 rounded-xl text-sm font-semibold text-slate-700 hover:border-primary-300 hover:bg-primary-50 hover:-translate-y-0.5 active:translate-y-0 transition-all duration-200"
						>
							üè† New Room
						</a>
						if isCreator {
							<button
								@click="$store.roomSettings.showModal = true"
								class="inline-flex items-center gap-2 px-5 py-2.5 bg-white border-2 border-slate-200 rounded-xl text-sm font-semibold text-slate-700 hover:border-primary-300 hover:bg-primary-50 hover:-translate-y-0.5 active:translate-y-0 transition-all duration-200"
								title="Room Settings"
							>
								‚öôÔ∏è Settings
							</button>
						}
					</div>
					<div class="flex items-center gap-5">
						<div id="round-indicator" class="flex items-center gap-2">
							<span class="inline-flex items-center px-4 py-1.5 bg-primary-50 border border-primary-200 rounded-full text-sm font-bold text-primary-700 uppercase tracking-wider">
								Round <span x-text="$store.roomState.roundNumber">1</span>
							</span>
						</div>
						<div x-data="expirationCountdown()" class="flex items-center gap-2 text-sm">
							<span class="text-slate-300">‚Ä¢</span>
							<span class="text-slate-600">
								Expires in <span class="font-semibold text-slate-900" x-text="timeRemaining">Loading...</span>
							</span>
						</div>
					</div>
				</div>
				<div class="flex items-center gap-3">
					if participant != nil {
						<div
							x-data={ fmt.Sprintf("{ editing: false, newName: '', currentName: '%s', participantId: '%s' }", participant.Name, participant.ID) }
							@name-updated.window="if ($event.detail.participantId === participantId) { currentName = $event.detail.name }"
							class="flex items-center gap-3 px-4 py-2 bg-gradient-to-br from-primary-50 to-success-50 border border-primary-200 rounded-xl shadow-sm"
						>
							<div class="w-9 h-9 bg-gradient-to-br from-primary-500 to-success-500 text-white rounded-full flex items-center justify-center text-sm font-bold shadow-md">
								<span x-text="currentName.charAt(0)"></span>
							</div>
							<div x-show="!editing" class="flex items-center gap-1">
								<button
									@click="editing = true; newName = currentName"
									class="text-sm font-semibold text-primary-900 hover:text-primary-700 cursor-pointer transition-colors"
								>
									<span x-text="currentName"></span>
								</button>
							</div>
							<div x-show="editing" class="flex items-center gap-2">
								<input
									x-model="newName"
									@keydown.enter="sendMessage('update_name', { name: newName }); currentName = newName; editing = false"
									@keydown.escape="editing = false"
									type="text"
									class="text-sm font-semibold text-primary-900 border-b border-primary-500 bg-transparent focus:outline-none w-32"
									x-init="setTimeout(() => $el.focus(), 10)"
								/>
								<button
									@click="sendMessage('update_name', { name: newName }); currentName = newName; editing = false"
									class="text-xs text-primary-600 hover:text-primary-700 transition-colors"
								>
									‚úì
								</button>
								<button
									@click="editing = false"
									class="text-xs text-red-500 hover:text-red-600 transition-colors"
								>
									‚úï
								</button>
							</div>
						</div>
					}
					@ShareControls(room.ID)
				</div>
			</header>
			@ParticipantGrid(room.Participants, room.State, room.Votes, participant)
			@Statistics(room.State, nil, 1)
			if participant != nil && participant.Role == models.RoleVoter {
				<div id="voting-cards">
					// Always use custom values (either predefined fibonacci or user custom)
					// Append special values (?, ‚òï) to all voting cards
					if len(room.CustomValues) > 0 {
						@VotingCards(append(room.CustomValues, "?", "‚òï"))
					} else {
						// Fallback to default fibonacci if no custom values
						@VotingCards([]string{"0", "1", "2", "3", "5", "8", "13", "21", "?", "‚òï"})
					}
				</div>
			}
			// Show controls to voters OR room creators (even if they're spectators)
			if participant != nil && (participant.Role == models.RoleVoter || isCreator) {
				@Controls(room.State, isCreator, len(room.Votes))
			}
			// Settings modal for room creator
			if isCreator {
				@SettingsModal()
			}
		</div>
	}
}
