name: Release and Deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  LIGHTSAIL_SERVICE_NAME: ${{ vars.LIGHTSAIL_SERVICE_NAME || 'planning-poker-prod' }}

permissions:
  contents: write  # Need write permission for creating releases

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache templ binary
        uses: actions/cache@v4
        with:
          path: ~/go/bin/templ
          key: ${{ runner.os }}-templ-${{ hashFiles('go.mod') }}

      - name: Install templ
        run: |
          if [ ! -f ~/go/bin/templ ]; then
            go install github.com/a-h/templ/cmd/templ@latest
          fi
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate templ templates
        run: templ generate

      - name: Run tests
        run: go test -v ./...

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## Initial Release" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "First production release of Planning Poker." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Planning Poker v${{ steps.version.outputs.version }}
          body: |
            # Planning Poker v${{ steps.version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ## ðŸš€ Deployment

            This version is automatically deployed to AWS Lightsail Container Service.

            **Service URL**: Check deployment logs or run:
            ```bash
            aws lightsail get-container-services --service-name planning-poker-prod \
              --query 'containerServices[0].url' --output text
            ```

            ## ðŸ“‹ Build Information

            - **Version**: ${{ steps.version.outputs.version }}
            - **Commit**: ${{ github.sha }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Go Version**: 1.25
            - **Docker Image**: Deployed to Lightsail Container Service

            ## ðŸ“š Documentation

            See [DEPLOY.md](https://github.com/${{ github.repository }}/blob/main/DEPLOY.md) for deployment guide.
          draft: false
          prerelease: false
          generate_release_notes: false

  deploy:
    name: Deploy to AWS Lightsail
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Docker image
        env:
          VERSION: ${{ steps.version.outputs.version }}
          BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          GIT_COMMIT: ${{ github.sha }}
        run: |
          docker build \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_TIME=${BUILD_TIME} \
            --build-arg GIT_COMMIT=${GIT_COMMIT:0:7} \
            -t planning-poker:${VERSION} \
            -t planning-poker:latest \
            .

      - name: Push image to Lightsail
        run: |
          # Install Lightsail plugin if needed
          aws lightsail push-container-image \
            --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            --label planning-poker-${{ steps.version.outputs.version }} \
            --image planning-poker:${{ steps.version.outputs.version }}

      - name: Get Lightsail image reference
        id: image
        run: |
          # Get the image reference from the push output
          IMAGE=$(aws lightsail get-container-images --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            | jq -r '.containerImages[0].image')
          echo "reference=$IMAGE" >> $GITHUB_OUTPUT

      - name: Create deployment configuration
        run: |
          cat > deployment.json << EOF
          {
            "containers": {
              "planning-poker": {
                "image": "${{ steps.image.outputs.reference }}",
                "ports": {
                  "8090": "HTTP"
                },
                "environment": {
                  "PP_ENV": "production"
                }
              }
            },
            "publicEndpoint": {
              "containerName": "planning-poker",
              "containerPort": 8090,
              "healthCheck": {
                "path": "/",
                "intervalSeconds": 30
              }
            }
          }
          EOF

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            --cli-input-json file://deployment.json

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            | jq -r '.containerServices[0].state'

      - name: Deployment complete
        run: |
          SERVICE_URL=$(aws lightsail get-container-services --service-name ${{ env.LIGHTSAIL_SERVICE_NAME }} \
            | jq -r '.containerServices[0].url')
          echo "âœ… Deployment successful!"
          echo "ðŸ”— Service URL: https://${SERVICE_URL}"
