package templates

import (
	"fmt"
	"github.com/damiengoehrig/planning-poker/internal/models"
)

templ Room(room *models.Room, participant *models.Participant, isCreator bool) {
	@Base(room.Name) {
		<div class="bg-white rounded-lg shadow-lg p-6 min-h-[600px]" x-data="roomStateManager()" hx-ext="ws" ws-connect={"/ws/" + room.ID}>
			if participant == nil {
				@JoinModal(room.ID)
			}
			<header class="flex flex-col md:flex-row md:justify-between md:items-center gap-4 pb-6 mb-6 border-b border-gray-200">
				<div class="flex flex-col gap-3">
					<div class="flex items-center gap-4">
						<div x-data="{ editing: false, newName: '' }">
							<div x-show="!editing" class="flex items-center gap-2">
								<h1 class="text-2xl font-bold text-gray-900">{room.Name}</h1>
								if isCreator {
									<button
										@click="editing = true; newName = $el.parentElement.querySelector('h1').textContent.trim()"
										class="text-gray-400 hover:text-gray-600 transition"
										title="Edit room name"
									>
										‚úèÔ∏è
									</button>
								}
							</div>
							<div x-show="editing" class="flex items-center gap-2">
								<input
									x-model="newName"
									@keydown.enter="sendMessage('update_room_name', { name: newName }); editing = false"
									@keydown.escape="editing = false"
									type="text"
									class="text-2xl font-bold text-gray-900 border-b-2 border-blue-500 bg-transparent focus:outline-none"
									x-init="setTimeout(() => $el.focus(), 10)"
								/>
								<button
									@click="sendMessage('update_room_name', { name: newName }); editing = false"
									class="text-green-600 hover:text-green-700"
								>
									‚úì
								</button>
								<button
									@click="editing = false"
									class="text-red-600 hover:text-red-700"
								>
									‚úï
								</button>
							</div>
						</div>
						<a
							href="/"
							class="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-md text-sm font-medium hover:bg-gray-200 transition"
						>
							üè† New Room
						</a>
					</div>
					<div class="flex items-center gap-4">
						<div id="round-indicator" class="flex items-center gap-2">
							<span class="text-sm font-semibold text-gray-600 uppercase tracking-wider">
								Round <span x-text="$store.roomState.roundNumber">1</span>
							</span>
						</div>
						<div x-data="expirationCountdown()" class="flex items-center gap-2 text-sm">
							<span class="text-gray-500">‚Ä¢</span>
							<span class="text-gray-600">
								Expires in <span class="font-medium text-orange-600" x-text="timeRemaining">Loading...</span>
							</span>
						</div>
					</div>
				</div>
				<div class="flex items-center gap-2">
					if participant != nil {
						<div
							x-data={ fmt.Sprintf("{ editing: false, newName: '', currentName: '%s', participantId: '%s' }", participant.Name, participant.ID) }
							@name-updated.window="if ($event.detail.participantId === participantId) { currentName = $event.detail.name }"
							class="flex items-center gap-2 px-3 py-1.5 bg-blue-50 border border-blue-200 rounded-lg"
						>
							<div class="w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">
								<span x-text="currentName.charAt(0)"></span>
							</div>
							<div x-show="!editing" class="flex items-center gap-1">
								<button
									@click="editing = true; newName = currentName"
									class="text-sm font-medium text-blue-900 hover:underline cursor-pointer"
								>
									<span x-text="currentName"></span>
								</button>
							</div>
							<div x-show="editing" class="flex items-center gap-1">
								<input
									x-model="newName"
									@keydown.enter="sendMessage('update_name', { name: newName }); currentName = newName; editing = false"
									@keydown.escape="editing = false"
									type="text"
									class="text-sm font-medium text-blue-900 border-b border-blue-500 bg-transparent focus:outline-none w-32"
									x-init="setTimeout(() => $el.focus(), 10)"
								/>
								<button
									@click="sendMessage('update_name', { name: newName }); currentName = newName; editing = false"
									class="text-xs text-green-600 hover:text-green-700"
								>
									‚úì
								</button>
								<button
									@click="editing = false"
									class="text-xs text-red-600 hover:text-red-700"
								>
									‚úï
								</button>
							</div>
						</div>
					}
					@ShareControls(room.ID)
				</div>
			</header>
			@ParticipantGrid(room.Participants, room.State, room.Votes, participant)
			@Statistics(room.State, nil, 1)
			if participant != nil && participant.Role == models.RoleVoter {
				<div id="voting-cards">
					// Always use custom values (either predefined fibonacci or user custom)
					// Append special values (?, ‚òï) to all voting cards
					if len(room.CustomValues) > 0 {
						@VotingCards(append(room.CustomValues, "?", "‚òï"))
					} else {
						// Fallback to default fibonacci if no custom values
						@VotingCards([]string{"0", "1", "2", "3", "5", "8", "13", "21", "?", "‚òï"})
					}
				</div>
				@Controls(room.State, isCreator, len(room.Votes))
			}
		</div>
	}
}
