name: Release and Deploy

on:
  push:
    tags:
      - 'v*.*.*'

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}

permissions:
  contents: write  # Need write permission for creating releases

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true
          cache-dependency-path: go.sum

      - name: Cache templ binary
        uses: actions/cache@v4
        with:
          path: ~/go/bin/templ
          key: ${{ runner.os }}-templ-${{ hashFiles('go.mod') }}

      - name: Install templ
        run: |
          if [ ! -f ~/go/bin/templ ]; then
            go install github.com/a-h/templ/cmd/templ@latest
          fi
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Generate templ templates
        run: templ generate

      - name: Run tests
        run: go test -v ./...

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## Initial Release" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "First production release of Planning Poker." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Planning Poker v${{ steps.version.outputs.version }}
          body: |
            # Planning Poker v${{ steps.version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ## 🚀 Deployment

            This version is automatically deployed to AWS EC2 via SSH.

            **Service URL**: Check your configured domain or EC2 public IP.

            ## 📋 Build Information

            - **Version**: ${{ steps.version.outputs.version }}
            - **Commit**: ${{ github.sha }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Go Version**: 1.25
            - **Deployment**: EC2 with Docker Compose

            ## 📚 Documentation

            See [DEPLOY.md](https://github.com/${{ github.repository }}/blob/main/DEPLOY.md) for deployment guide.
          draft: false
          prerelease: false
          generate_release_notes: false

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ vars.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ vars.EC2_HOST }}
          GITHUB_REF: ${{ github.ref_name }}
        run: |
          ssh -i ~/.ssh/deploy_key ubuntu@$SSH_HOST << 'ENDSSH'
            set -e
            cd /opt/planning-poker

            echo "📥 Pulling latest changes..."
            sudo git fetch origin
            sudo git checkout ${{ env.GITHUB_REF }}
            sudo git pull origin ${{ env.GITHUB_REF }}

            echo "🔨 Building new image..."
            sudo docker compose -f docker-compose.prod.yml build --no-cache app

            echo "🔄 Restarting services..."
            sudo docker compose -f docker-compose.prod.yml up -d

            echo "📊 Service status:"
            sudo docker compose -f docker-compose.prod.yml ps

            echo "✅ Deployment complete!"
          ENDSSH

      - name: Verify deployment
        env:
          SSH_HOST: ${{ vars.EC2_HOST }}
        run: |
          echo "🔍 Verifying deployment..."
          ssh -i ~/.ssh/deploy_key ubuntu@$SSH_HOST << 'ENDSSH'
            # Check if containers are running
            if sudo docker compose -f /opt/planning-poker/docker-compose.prod.yml ps | grep -q "Up"; then
              echo "✅ Containers are running"
            else
              echo "❌ Containers are not running"
              sudo docker compose -f /opt/planning-poker/docker-compose.prod.yml logs --tail=50
              exit 1
            fi
          ENDSSH

      - name: Deployment complete
        env:
          DOMAIN: ${{ vars.DOMAIN_NAME || 'your-domain.com' }}
        run: |
          echo "✅ Deployment successful!"
          echo "🔗 Service URL: https://${{ env.DOMAIN }}"
          echo "📝 Check logs with: ssh ubuntu@${{ vars.EC2_HOST }} 'sudo docker compose -f /opt/planning-poker/docker-compose.prod.yml logs -f'"
